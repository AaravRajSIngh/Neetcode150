frequency(N * k)

class Solution {
public:
vector<vector<string>> groupAnagrams(vector<string>& strs) {
    unordered_map<string, vector<string>> mp;
    for (string& s : strs) {
        vector<int> freq(26, 0);
        for (char c : s) freq[c - 'a']++;
        string key;
        for (int f : freq) {
            key += to_string(f) + '#';
        }
        mp[key].push_back(s);
    }
    vector<vector<string>> res;
    for (auto& [_, group] : mp) res.push_back(group);
    return res;
}
};


Approach 2: sort(Nlog k)


class Solution {
public:

vector<vector<string>> groupAnagrams(vector<string>& strs) {
    unordered_map<string, vector<string>> mp;
    for (string s : strs) {
        string key = s;
        sort(key.begin(), key.end());
        mp[key].push_back(s);
    }
    vector<vector<string>> res;
    for (auto& [_, group] : mp) res.push_back(group);
    return res;
}

};
